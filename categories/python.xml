<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Björn I. Dahlgren's personal page (Posts about Python)</title><link>http://bjodah.github.io/blog/</link><description></description><atom:link rel="self" type="application/rss+xml" href="http://bjodah.github.io/blog/categories/python.xml"></atom:link><language>en</language><lastBuildDate>Tue, 29 Aug 2017 12:20:32 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>GSoC 2017 Report</title><link>http://bjodah.github.io/blog/posts/gsoc-report.html</link><dc:creator>Björn Dahlgren</dc:creator><description>&lt;div&gt;&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;My project was to enhance the code-generation facilities of SymPy.
You can read my &lt;a class="reference external" href="https://github.com/sympy/sympy/wiki/GSoC-2017-Application-Bj%C3%B6rn-Dahlgren:-Improved-code-generation-facilities"&gt;proposal&lt;/a&gt;
for the motivation behind this work. The overall goals were the
following:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Allow to render code targeting a specific precision (e.g. binary32
vs. binary64 floating point numbers). Prior to this project the
printers would sometimes generate code containing a mixture of single,
double and extended precision, and there were no way to change this
short of subclassing the printers and overriding the methods.&lt;/li&gt;
&lt;li&gt;Allow to render blocks of code and not only expressions. There was
an initial effort to support this in the submodule
&lt;tt class="docutils literal"&gt;sympy.codegen&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;Improve the &lt;tt class="docutils literal"&gt;Lambdify&lt;/tt&gt; functionality in SymEngine's python
wrapper. Before this project it did not handle outputs of mixed
shape, and it also had considerable overhead.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="summary-of-the-final-work-product"&gt;
&lt;h2&gt;Summary of the final work product&lt;/h2&gt;
&lt;p&gt;A whole new repository with code and notebooks for code-generation was
created during the first part of GSoC:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/sympy/scipy-2017-codegen-tutorial"&gt;https://github.com/sympy/scipy-2017-codegen-tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Jason Moore, Kenneth Lyons, Aaron Meurer and I (my &lt;a class="reference external" href="https://github.com/sympy/scipy-2017-codegen-tutorial/commits/master?author=bjodah"&gt;commits&lt;/a&gt;) created this for the
tutorial in code generation with SymPy at the SciPy 2017 conference.&lt;/p&gt;
&lt;p&gt;The majority of the work are contained in these pull-requests:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;symengine.py, &lt;a class="reference external" href="https://github.com/symengine/symengine.py/pull/112"&gt;#112&lt;/a&gt; (merged):
Heterogeneous output in Lambdify.&lt;/li&gt;
&lt;li&gt;symengine.py, &lt;a class="reference external" href="https://github.com/symengine/symengine.py/pull/171"&gt;#171&lt;/a&gt; (merged):
Bug fix for heterogeneous output in Lambdify.&lt;/li&gt;
&lt;li&gt;sympy, &lt;a class="reference external" href="https://github.com/sympy/sympy/pull/12693"&gt;#12693&lt;/a&gt;
(merged): Extending the &lt;tt class="docutils literal"&gt;sympy.codegen.ast&lt;/tt&gt; module with new
classes (for generating ASTs).&lt;/li&gt;
&lt;li&gt;sympy, &lt;a class="reference external" href="https://github.com/sympy/sympy/pull/12808"&gt;#12808&lt;/a&gt;
&amp;amp; &lt;a class="reference external" href="https://github.com/sympy/sympy/pull/13046"&gt;#13046&lt;/a&gt; (merged):
PythonCodePrinter, MpmathPrinter, SymPyPrinter NumPyPrinter, SciPyPrinter.&lt;/li&gt;
&lt;li&gt;sympy, &lt;a class="reference external" href="https://github.com/sympy/sympy/pull/13063"&gt;#13194&lt;/a&gt; (open):
Add &lt;tt class="docutils literal"&gt;.codegen.rewriting&lt;/tt&gt; module.&lt;/li&gt;
&lt;li&gt;sympy, &lt;a class="reference external" href="https://github.com/sympy/sympy/pull/13200"&gt;#13200&lt;/a&gt; (merged):
Add &lt;tt class="docutils literal"&gt;.codegen.approximations&lt;/tt&gt; module.&lt;/li&gt;
&lt;li&gt;sympy, &lt;a class="reference external" href="https://github.com/sympy/sympy/pull/13100"&gt;#13100&lt;/a&gt; (open):
More AST nodes. Building on #12693, this is the biggest PR. In
addition to improving the AST nodes it introduces
&lt;tt class="docutils literal"&gt;.codegen.algorithms&lt;/tt&gt; as well as an internal testing module
&lt;tt class="docutils literal"&gt;.utilities._compilation&lt;/tt&gt; which allows to compile and import/run
strings of C/C++/Fortran code.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In addition there were smaller pull-requests made &amp;amp; merged:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;sympy_benchmarks: &lt;a class="reference external" href="https://github.com/sympy/sympy_benchmarks/pull/37"&gt;#37&lt;/a&gt;,
&lt;a class="reference external" href="https://github.com/sympy/sympy_benchmarks/pull/38"&gt;#38&lt;/a&gt;,
&lt;a class="reference external" href="https://github.com/sympy/sympy_benchmarks/pull/39"&gt;#39&lt;/a&gt;,
&lt;a class="reference external" href="https://github.com/sympy/sympy_benchmarks/pull/40"&gt;#40&lt;/a&gt;:
Benchmarks for lambidfy and common sub-expression elimination.&lt;/li&gt;
&lt;li&gt;sympy: &lt;a class="reference external" href="https://github.com/sympy/sympy/pull/12686"&gt;#12686&lt;/a&gt;
(Support for __abs__ in SymPy matrices),
&lt;a class="reference external" href="https://github.com/sympy/sympy/pull/12692"&gt;#12692&lt;/a&gt; (subclass support for
SymPy's deprecation decorator), &lt;a class="reference external" href="https://github.com/sympy/sympy/pull/12762"&gt;#12762&lt;/a&gt; (Fix floating point
error under windows),
&lt;a class="reference external" href="https://github.com/sympy/sympy/pull/12805"&gt;#12805&lt;/a&gt; Revert change to
cse (performance regression), &lt;a class="reference external" href="https://github.com/sympy/sympy/pull/12764"&gt;#12764&lt;/a&gt; environment variable use,
&lt;a class="reference external" href="https://github.com/sympy/sympy/pull/12883"&gt;#12833&lt;/a&gt; string formatting,
&lt;a class="reference external" href="https://github.com/sympy/sympy/pull/12944"&gt;#12944&lt;/a&gt; allow relative
path in autowrap,
&lt;a class="reference external" href="https://github.com/sympy/sympy/pull/13063"&gt;#13063&lt;/a&gt; fix test timing script
(and updated timings),
&lt;a class="reference external" href="https://github.com/sympy/sympy/pull/12833"&gt;#12833 (some of the commits)&lt;/a&gt; Allow custom class
in autowrap &amp;amp; codegen,
&lt;a class="reference external" href="https://github.com/sympy/sympy/pull/12843"&gt;#12843 (one of the commits)&lt;/a&gt; allow changing compile
arguments in &lt;tt class="docutils literal"&gt;CythonCodeWrapper&lt;/tt&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="detailed-review-of-the-work"&gt;
&lt;h2&gt;Detailed review of the work&lt;/h2&gt;
&lt;p&gt;The first weeks of the summer was mostly spent on the code generation
material presented at the SciPy conference tutorial, in parallel with
that work was done to handle different choices of data types in the
printers. And new AST nodes were introduced to represent type.&lt;/p&gt;
&lt;div class="section" id="code-for-the-tutorial"&gt;
&lt;h3&gt;Code for the tutorial&lt;/h3&gt;
&lt;p&gt;During the writing of this code improvements were made to the existing
code-generation facilities and SymPy (and experience with their
shortcomings were gained). One of the challenges in this work was that
the attendees at the conference would be using all major platforms
(Linux/macOS/Windows) and different Python versions, we needed to
ensure that generating code, compiling, linking and importing worked
all combinations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="lambdify-in-symengine-s-python-wrapper"&gt;
&lt;h3&gt;Lambdify in SymEngine's python wrapper&lt;/h3&gt;
&lt;p&gt;Writing the code for the tutorial provided great test cases for the
code-generation capabilities of SymPy. The motivation of doing code
generation is usually that of speed (but sometimes it may be motivated
by wanting to work with some library written in another language). An
alternative to generating high level code which then gets compiled, is
to go toward assembly (or some intermediate representation). SymEnigne
had support for doing this via LLVM's JIT compiler. The Python
bindings however needed an overhaul (something I had included in the
time-line in my proposal), and now I wanted to use &lt;tt class="docutils literal"&gt;Lambdify&lt;/tt&gt; (the
SymEngine version of &lt;tt class="docutils literal"&gt;sympy.lambdify&lt;/tt&gt;), and together with the help
of Isuru Fernando we got it to work (and benchmarks for &lt;a class="reference external" href="https://pydy.org"&gt;pydy&lt;/a&gt; show that it is even faster than using the cython
backend).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ast-nodes"&gt;
&lt;h3&gt;AST nodes&lt;/h3&gt;
&lt;p&gt;I had made AST nodes in my prototype for my proposal, right at the
start of the project I ported those to SymPy. It took some rewriting
and discussion with Aaron (both during our weekly meetings and at the
conference) to get it to a point where we were confident enough to
merge it into SymPy's codebase.&lt;/p&gt;
&lt;p&gt;One of the major challanges when designing the new classes for
&lt;tt class="docutils literal"&gt;sympy.codegen.ast&lt;/tt&gt; was dealing with optional arguments in our
subclasses of &lt;tt class="docutils literal"&gt;symyp.core.basic.Basic&lt;/tt&gt;. The solutions which worked
best was to have a subclass &lt;tt class="docutils literal"&gt;sympy.codegen.Node&lt;/tt&gt; which stored such
optinoal information as instances in a SymPy &lt;tt class="docutils literal"&gt;Tuple&lt;/tt&gt; as its last
argument (accessible as &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;.attrs`).&lt;/span&gt; This allowed the code
printers for Python, C and Fortran to support the same ``Variable&lt;/tt&gt; class
for instance, where the C printer would also look for attributes
"value_const", "volatile" etc. and the Fortran printer would look for
e.g. "intent".&lt;/p&gt;
&lt;p&gt;Language specific nodes have been added under their own submodules in
&lt;tt class="docutils literal"&gt;sympy.codegen&lt;/tt&gt; (e.g. &lt;tt class="docutils literal"&gt;sympy.codegen.fnodes&lt;/tt&gt; for Fortran and
&lt;tt class="docutils literal"&gt;sympy.codegen.cnodes&lt;/tt&gt; for C). The most common statements are now
implmeneted, but the nodes are by far not exhaustive. There are now
also helper functions for generating e.g. modules in
&lt;tt class="docutils literal"&gt;sympy.codegen.pyutils&lt;/tt&gt; &amp;amp; &lt;tt class="docutils literal"&gt;sympy.codegen.futils&lt;/tt&gt; (for Python and
Fortran respectively).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="code-printers"&gt;
&lt;h3&gt;Code printers&lt;/h3&gt;
&lt;p&gt;Dealing with floating point types is
tricky since one want to be pragmatic in order for the types to be
helpful (IEEE 754 conformance is assumed), but general enough that
people targeting hardware with non-standard conformance can still
generate useful code using SymPy. For example, one can now choose
the targeted precision:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; from sympy import ccode, symbols, Rational
&amp;gt;&amp;gt;&amp;gt; x, tau = symbols("x, tau")
&amp;gt;&amp;gt;&amp;gt; expr = (2*tau)**Rational(7, 2)
&amp;gt;&amp;gt;&amp;gt; from sympy.codegen.ast import real, float80
&amp;gt;&amp;gt;&amp;gt; ccode(expr, type_aliases={real: float80})
'8*M_SQRT2l*powl(tau, 7.0L/2.0L)'
&lt;/pre&gt;
&lt;p&gt;Here we have assumed that the targeted architechture has x87 FPU (long
double is a 10 byte extended precision floating point data type). But
it is fully possible to generate code for some other targeted
precision, e.g. GCC's software implemented float128:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; from sympy.printing.ccode import C99CodePrinter
&amp;gt;&amp;gt;&amp;gt; from sympy.codegen.ast import FloatType
&amp;gt;&amp;gt;&amp;gt; f128 = FloatType('_Float128', 128, nmant=112, nexp=15)
&amp;gt;&amp;gt;&amp;gt; p128 = C99CodePrinter(dict(
...     type_aliases={real: f128},
...     type_literal_suffixes={f128: 'Q'},
...     type_func_suffixes={f128: 'f128'},
...     type_math_macro_suffixes={
...         real: 'f128',
...         f128: 'f128'
...     },
...     type_macros={
...         f128: ('__STDC_WANT_IEC_60559_TYPES_EXT__',)
...     },
...     math_macros={}
... ))
&amp;gt;&amp;gt;&amp;gt; p128.doprint(tau**Rational(7, 2))
'powf128(tau, 7.0Q/2.0Q)'
&lt;/pre&gt;
&lt;p&gt;For generating Python code there was previosuly one function
(&lt;tt class="docutils literal"&gt;sympy.printing.python&lt;/tt&gt;) which generated code dependent on SymPy.
During the project a proper code printer for Python was introduced
(an example of its output is shown later). The much used function
&lt;tt class="docutils literal"&gt;lambdify&lt;/tt&gt; was also changed to use this new printer. Introducing
such a big change without breaking backward compatibility was
certainly a challenge, but the benefit is that the user may now
subclass the printers to override their default behaviour and use
their custom printer in &lt;tt class="docutils literal"&gt;lambdify&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="rewriting"&gt;
&lt;h3&gt;Rewriting&lt;/h3&gt;
&lt;p&gt;One usual challenge when working with symbolic expressions is that
there are many ways to write the same expresisons. For code-generation
purposes we want to write it in a manner which maximizes performance
and minimizes significance loss (or let the user make that choice when
the two are at odds). Since SymPy already has a great tools for
traversing the expression tree and applying quite advanced pattern
matching based replacements using &lt;tt class="docutils literal"&gt;Wild&lt;/tt&gt; it was reasonably
straightforward to implement rewriting rules for transforming e.g.
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;2**x&lt;/span&gt;&lt;/tt&gt; to &lt;tt class="docutils literal"&gt;exp2(x)&lt;/tt&gt; etc. Using the same structure, rules for
rewriting expressions to drop small elements in sums (based on a
user-predefined bounds).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="algorithms"&gt;
&lt;h3&gt;Algorithms&lt;/h3&gt;
&lt;p&gt;One of the great benefitst from being able to represent abstract
syntax trees as (largetly) language agnostic SymPy obejcts is that we
can create functions for building these trees. Simpler numerical
algorithms (which are ubiquitous in scientific codes) can be collected
under &lt;tt class="docutils literal"&gt;sympy.codegen.algorithms&lt;/tt&gt;. As a first case Newton's
algortihm was implemented:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; from sympy import cos
&amp;gt;&amp;gt;&amp;gt; from sympy.codegen.algorithms import newtons_method_function
&amp;gt;&amp;gt;&amp;gt; ast = newtons_method_function(cos(x) - x**3, x)
&amp;gt;&amp;gt;&amp;gt; print(ccode(ast))
double newton(double x){
   double d_x = INFINITY;
   while (fabs(d_x) &amp;gt; 9.9999999999999998e-13) {
      d_x = (pow(x, 3) - cos(x))/(-3*pow(x, 2) - sin(x));
      x += d_x;
   }
   return x;
}
&lt;/pre&gt;
&lt;p&gt;once we have the AST we can print it using the python code printer as well:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; from sympy.printing import pycode
&amp;gt;&amp;gt;&amp;gt; print(pycode(ast))
def newton(x):
    d_x = float('inf')
    while abs(d_x) &amp;gt; 1.0e-12:
        d_x = (x**3 - math.cos(x))/(-3*x**2 - math.sin(x))
        x += d_x
    return x
&lt;/pre&gt;
&lt;p&gt;or the Fortran code printer:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; from sympy.printing import fcode
&amp;gt;&amp;gt;&amp;gt; print(fcode(ast, source_format='free', standard=2003))
real*8 function newton(x)
real*8 :: x
real*8 :: d_x = (huge(0d0) + 1)
do while (abs(d_x) &amp;gt; 1.0d-12)
   d_x = (x**3 - cos(x))/(-3*x**2 - sin(x))
   x = x + d_x
end do
newton = x
end function
&lt;/pre&gt;
&lt;p&gt;Newton's method is quite simple, but what makes SymPy suitable for
this is that it needs the ratio between the function and its
derivative.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I think that I managed to address all parts of my proposal. That being
said, there is still a lot of potential to expand the
&lt;tt class="docutils literal"&gt;sympy.codegen&lt;/tt&gt; module. But now there are purposefully made base
classes for creating AST node classes (&lt;tt class="docutils literal"&gt;sympy.codegen.ast.Token&lt;/tt&gt; &amp;amp;
&lt;tt class="docutils literal"&gt;sympy.codegen.ast.Node&lt;/tt&gt;), the language agnostic ones are general enough
that an algorithm represented as a single AST can be printed as
Python/C/Fortran. At some level code will still be needed to be
written manually (presumably as templates), but the amount of template
rendering logic can be significantly reduced. Having algorithm AST
factories such as the one for Newton's method in
&lt;tt class="docutils literal"&gt;sympy.codegen.ast.algorithms&lt;/tt&gt; is also exciting since those
algorithms can be unit-tested as part of SymPy. Ideas for furthor work
on code-generation with SymPy have been added to &lt;a class="reference external" href="https://github.com/sympy/sympy/wiki/GSoC-2018-Ideas#code-generation"&gt;the list&lt;/a&gt;
of potential ideas for next years GSoC.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="post-gsoc"&gt;
&lt;h2&gt;Post-GSoC&lt;/h2&gt;
&lt;p&gt;I plan to continue to contribute to the SymPy project, and start using
the new resources in my own research. Working with the new classes
should also allow us to refine them if needed (preferably before the
next release is tagged in order to avoid having to introduce
deprecation cycles). SymPy is an amazing project with
a great community. I'm really grateful to Google for funding me (and
others) to do a full summers work on this project.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>Python</category><category>SymPy</category><guid>http://bjodah.github.io/blog/posts/gsoc-report.html</guid><pubDate>Mon, 28 Aug 2017 19:15:00 GMT</pubDate></item><item><title>Status update week 13 GSoC</title><link>http://bjodah.github.io/blog/posts/gsoc-week13.html</link><dc:creator>Björn Dahlgren</dc:creator><description>&lt;div&gt;&lt;p&gt;This was the last week of work on GSoC. I have been hard at work
improving documentation and examples for the code.&lt;/p&gt;
&lt;div class="section" id="adding-much-needed-documentaiton"&gt;
&lt;h2&gt;Adding much needed documentaiton&lt;/h2&gt;
&lt;p&gt;I've spent the weekend adding examples and writing up documentation
for my big PR &lt;a class="reference external" href="https://github.com/sympy/sympy/pull/13100"&gt;#13100&lt;/a&gt;
which is not yet merged. I am quite excited how this PR turned out and
I am happy with the design of the underlying AST nodes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="rewriting"&gt;
&lt;h2&gt;Rewriting&lt;/h2&gt;
&lt;p&gt;A new submodule &lt;tt class="docutils literal"&gt;.codegen.rewriting&lt;/tt&gt; was added (in &lt;a class="reference external" href="https://github.com/sympy/sympy/pull/13194"&gt;#13194&lt;/a&gt;), this allows a user to
rewrite expressions using special math functions. The provided rules
are those to rewrite to C99's special math functions (&lt;tt class="docutils literal"&gt;expm1&lt;/tt&gt;,
&lt;tt class="docutils literal"&gt;log1p&lt;/tt&gt; etc.). I think it will be a useful addition (I have myself
had the need for exactly this in my own research). The design is quite
simple thanks to the excellt &lt;tt class="docutils literal"&gt;replace&lt;/tt&gt; function in SymPy. There are
still some corner cases (I have an "xfailed" test checked in for
example).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>Python</category><category>SymPy</category><guid>http://bjodah.github.io/blog/posts/gsoc-week13.html</guid><pubDate>Mon, 28 Aug 2017 19:15:00 GMT</pubDate></item><item><title>Status update week 12 GSoC</title><link>http://bjodah.github.io/blog/posts/gsoc-week12.html</link><dc:creator>Björn Dahlgren</dc:creator><description>&lt;div&gt;&lt;div class="section" id="working-on-new-ast-nodes"&gt;
&lt;h2&gt;Working on new AST nodes&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/sympy/sympy/pull/13100"&gt;#13100&lt;/a&gt; is shaping up to
be the largest PR of my GSoC project. The design of the new AST nodes
especially (&lt;tt class="docutils literal"&gt;Token&lt;/tt&gt;) is really helpful. But there is still a design
issue: some nodes would naturally take different arguments depending
on what language is being targeted. So I came to the conclusion that I
needed some way of representing attributes. The solution I came up
with would be to have a slightly more capable &lt;tt class="docutils literal"&gt;Node&lt;/tt&gt; class
(subclassing &lt;tt class="docutils literal"&gt;Token&lt;/tt&gt;) which would in turn be subclassed from for
nodes that need attributes.&lt;/p&gt;
&lt;p&gt;I also enhanced the printing of both of these classes and introduced a
&lt;tt class="docutils literal"&gt;String&lt;/tt&gt; class, which in contrast to &lt;tt class="docutils literal"&gt;Symbol&lt;/tt&gt; does not accept
assumptions in its constructor, and does not have implied printing
rules of sub- &amp;amp; superscript etc.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="adding-codegen-algorithms"&gt;
&lt;h2&gt;Adding &lt;tt class="docutils literal"&gt;.codegen.algorithms&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;A new submodule &lt;tt class="docutils literal"&gt;.codegen.algorithms&lt;/tt&gt; was added, containing a AST
generating function for Newton's method. This makes a nice design
target for both the printers and AST nodes: being able to express the
same AST in differnt languages is definitely an indication that we
have a versatile printing system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="compiling-code-on-the-fly"&gt;
&lt;h2&gt;Compiling code on the fly&lt;/h2&gt;
&lt;p&gt;Introducing the &lt;tt class="docutils literal"&gt;.codegen.algorithms&lt;/tt&gt; module also made the need to
test generated code during CI runs clear. Jason Moore has previously
mentioned that he thinks one of my python packages (&lt;a class="reference external" href="https://github.com/bjodah/pycompilation"&gt;pycompilation&lt;/a&gt;) would fit nicely into
SymPy. I've been a bit relucatant to port it over since I have felt
that it has not seen enough testing (and only under Linux). But now
there was a need and we could start by making it an internal package
only used by our own tests. That way it will get to mature without
having to worry about deprecation cycles. And once more platforms are
added to SymPy's CI configuration it would also see testing on other
platforms (using AppVeyor for SymPy has been discussed for a long
while now).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>Python</category><category>SymPy</category><guid>http://bjodah.github.io/blog/posts/gsoc-week12.html</guid><pubDate>Mon, 21 Aug 2017 17:30:00 GMT</pubDate></item><item><title>Status update week 11 GSoC</title><link>http://bjodah.github.io/blog/posts/gsoc-week11.html</link><dc:creator>Björn Dahlgren</dc:creator><description>&lt;div&gt;&lt;div class="section" id="checking-in-the-new-ast-node-types"&gt;
&lt;h2&gt;Checking in the new AST node types&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/sympy/sympy/pull/12693"&gt;#12693&lt;/a&gt; got merged 🎉.
It took a few rewrites essentially but I fell that the design of the
new nodes will allow us to scale with reasonable maintance cost when
adding new language specific nodes. The base class for new AST nodes
(&lt;tt class="docutils literal"&gt;Token&lt;/tt&gt;) to sublcass from allows one to implement nodes in an
expressive manner by setting &lt;tt class="docutils literal"&gt;__slots__&lt;/tt&gt;. The constructor of
&lt;tt class="docutils literal"&gt;Token&lt;/tt&gt; then sets the &lt;tt class="docutils literal"&gt;.args&lt;/tt&gt; of &lt;tt class="docutils literal"&gt;Basic&lt;/tt&gt; based on &lt;tt class="docutils literal"&gt;__slots__&lt;/tt&gt;
this has the benefit that you need not write setters and getters using
&lt;tt class="docutils literal"&gt;@property&lt;/tt&gt; decorators (which quickly becomes tiresome when you have
many classes).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="checking-in-the-refactored-pythonprinter-and-changes-to-lambdify"&gt;
&lt;h2&gt;Checking in the refactored PythonPrinter and changes to lambdify&lt;/h2&gt;
&lt;p&gt;Finally the challenging work of refactoring &lt;tt class="docutils literal"&gt;lambdify&lt;/tt&gt; got merged
into SymPy's master branch: &lt;a class="reference external" href="https://github.com/sympy/sympy/pull/13046"&gt;#13046&lt;/a&gt;. We eventually decided
to drop the contents of the old translations dictionaries but leave
them be (in an empty state) in case users were modifying those in
their code. Hopefully this approach doesn't break any code out
there. Given how popular &lt;tt class="docutils literal"&gt;lambdify&lt;/tt&gt; is among SymPy's users, it is a
bit worrying that the test suite is not that extensive. I do remember
a google engineer mentioning that the follow the "Beyonce principle":
"I you liked it you should have put a test on it". Funny at is may be
I hope I don't need to defend these changes with that arguement.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>Python</category><category>SymPy</category><guid>http://bjodah.github.io/blog/posts/gsoc-week11.html</guid><pubDate>Mon, 14 Aug 2017 18:17:00 GMT</pubDate></item><item><title>Status update week 10 GSoC</title><link>http://bjodah.github.io/blog/posts/gsoc-week10.html</link><dc:creator>Björn Dahlgren</dc:creator><description>&lt;div&gt;&lt;div class="section" id="refactoring-lambdify"&gt;
&lt;h2&gt;Refactoring lambdify&lt;/h2&gt;
&lt;p&gt;In my work to refactor &lt;tt class="docutils literal"&gt;lambdify&lt;/tt&gt; I had come up with a solution
where I would dynamically subclass the CodePrinters in &lt;tt class="docutils literal"&gt;lambdify&lt;/tt&gt; to
add translations from the old translation dictionaries. I was not
happy with the solution and I don't think Aaron was either, we decided
to keep the old import mechanism of lambdify which populated the
namespace (instead of trying to generate code for the used imports
which I had been trying).&lt;/p&gt;
&lt;p&gt;So the work on refactoring &lt;tt class="docutils literal"&gt;lambdify&lt;/tt&gt; has continued in &lt;a class="reference external" href="https://github.com/sympy/sympy/pull/13046"&gt;#13046&lt;/a&gt;. And with &lt;cite&gt;this
&amp;lt;https://github.com/sympy/sympy/commit/265314fa63f5a662a7a187913d51d55a852b503c&amp;gt;&lt;/cite&gt;
commit I hope we are close to getting the new version of &lt;tt class="docutils literal"&gt;lambdify&lt;/tt&gt;
out the door.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="new-floattype-representation"&gt;
&lt;h2&gt;New FloatType representation&lt;/h2&gt;
&lt;p&gt;With some underlying assumptions about floating point representation
(two's complement etc.) I have now a &lt;a class="reference external" href="https://github.com/sympy/sympy/commit/18ea9a583509f28bc88102e73ebff8e0443d7988"&gt;new representation&lt;/a&gt;
of &lt;tt class="docutils literal"&gt;FloatType&lt;/tt&gt;. I'm much happier with this representation and I
think with it &lt;a class="reference external" href="https://github.com/sympy/sympy/pull/12693"&gt;#12693&lt;/a&gt; is
much closer to getting merged.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>Python</category><category>SymPy</category><guid>http://bjodah.github.io/blog/posts/gsoc-week10.html</guid><pubDate>Mon, 07 Aug 2017 19:03:00 GMT</pubDate></item><item><title>Status update week 8 GSoC</title><link>http://bjodah.github.io/blog/posts/gsoc-week8.html</link><dc:creator>Björn Dahlgren</dc:creator><description>&lt;p&gt;I finished up the new &lt;tt class="docutils literal"&gt;PythonCodePrinter&lt;/tt&gt; in &lt;a class="reference external" href="https://github.com/sympy/sympy/pull/12808"&gt;#12808&lt;/a&gt;. And I have started work
locally on having the NumPy- and Mpmath-printers subclass this new
CodePrinter. Both of these printers were previously subclassing
&lt;tt class="docutils literal"&gt;LambdaPrinter&lt;/tt&gt;, so the change is a bit intrusive with lots of
failing tests in the SymPy test suite. But this is a prerequisite for
changing &lt;tt class="docutils literal"&gt;sympy.utilities.lambdify&lt;/tt&gt; to accept custom &lt;tt class="docutils literal"&gt;CodePrinter&lt;/tt&gt;
subclasses as user input.&lt;/p&gt;</description><category>Python</category><category>SymPy</category><guid>http://bjodah.github.io/blog/posts/gsoc-week8.html</guid><pubDate>Mon, 24 Jul 2017 16:42:00 GMT</pubDate></item><item><title>Status update week 9 GSoC</title><link>http://bjodah.github.io/blog/posts/gsoc-week9.html</link><dc:creator>Björn Dahlgren</dc:creator><description>&lt;div&gt;&lt;p&gt;This week has been mostly spent on two refactoring lambdify and
enhancing the representation of types in our AST nodes under &lt;tt class="docutils literal"&gt;.codegen.ast&lt;/tt&gt;&lt;/p&gt;
&lt;div class="section" id="refactoring-lambdify"&gt;
&lt;h2&gt;Refactoring lambdify&lt;/h2&gt;
&lt;p&gt;The tricky business of chaning &lt;tt class="docutils literal"&gt;lambdify&lt;/tt&gt; to use our new CodePrinter
(or more importantly: letting the user pass their own subclasses
continues).&lt;/p&gt;
&lt;p&gt;There are currently dictionaries in &lt;tt class="docutils literal"&gt;sympy.utilities.lambdify&lt;/tt&gt; which
contains translations of SymPy entities to functions in corresponding
targeted python module (e.g. NumPy functions if the numpy module is
targeted). This week I've &lt;a class="reference external" href="https://github.com/sympy/sympy/pull/13046"&gt;worked&lt;/a&gt;
toward removing dependence on these,
and instead rely on the user providing print methods instead.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="work-on-types-in-codegen-ast"&gt;
&lt;h2&gt;Work on types in &lt;tt class="docutils literal"&gt;.codegen.ast&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;In my &lt;a class="reference external" href="https://github.com/sympy/sympy/pull/12693"&gt;WIP PR for AST nodes&lt;/a&gt; I have made more type
related changes. I've also changed the Fortran printer to use the new
type information. I am not 100% satisfied with the way the floating
point types are being represented at the moment (I'm using floating
point numbers to store the max, min and epsilon values for example).
I will probably rewrite those classes to use the underlying number of
bits for mantissa and exponent as the canonical data for the class
instances.&lt;/p&gt;
&lt;p&gt;I finished up the new &lt;tt class="docutils literal"&gt;PythonCodePrinter&lt;/tt&gt; in &lt;a class="reference external" href="https://github.com/sympy/sympy/pull/12808"&gt;#12808&lt;/a&gt;. And I have started work
locally on having the NumPy- and Mpmath-printers subclass this new
CodePrinter. Both of these printers were previously subclassing
&lt;tt class="docutils literal"&gt;LambdaPrinter&lt;/tt&gt;, so the change is a bit intrusive with lots of
failing tests in the SymPy test suite. But this is a prerequisite for
changing &lt;tt class="docutils literal"&gt;sympy.utilities.lambdify&lt;/tt&gt; to accept custom &lt;tt class="docutils literal"&gt;CodePrinter&lt;/tt&gt;
subclasses as user input.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>Python</category><category>SymPy</category><guid>http://bjodah.github.io/blog/posts/gsoc-week9.html</guid><pubDate>Mon, 24 Jul 2017 16:42:00 GMT</pubDate></item><item><title>Status update week 7 GSoC</title><link>http://bjodah.github.io/blog/posts/gsoc-week7.html</link><dc:creator>Björn Dahlgren</dc:creator><description>&lt;div&gt;&lt;p&gt;This was an exciting week. I flew to Autstin, TX to attend the SciPy 2017 conference.
On Monday morning Aaron Meurer, Jason Moore, Kenneth Lyons and I gave our new tutorial
on code-generation. You can view the tutorial here:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.sympy.org/scipy-2017-codegen-tutorial/"&gt;http://www.sympy.org/scipy-2017-codegen-tutorial/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can even follow along the tutorial video in a jupyter notebook in
your browser (thanks to the generous hosting by the folks at
&lt;tt class="docutils literal"&gt;mybinder.org&lt;/tt&gt;).&lt;/p&gt;
&lt;p&gt;It was nice to see that quite a few people were using SymPy for
code-generation in the community. And coincidentally a proper Python
code printer was requested by some users (this is on my todo-list for
this summers project).&lt;/p&gt;
&lt;p&gt;At the end of the conference there were also sprints, and SymPy did
sprint as well. For my project, the greatest benefit from the sprints
was that I got to discuss design choices wiht Aaron. We now have a
plan for how to deal with types in the code-printers, so now it is
"only" a matter of writing up the code to get it to work.&lt;/p&gt;&lt;/div&gt;</description><category>Python</category><category>SymPy</category><guid>http://bjodah.github.io/blog/posts/gsoc-week7.html</guid><pubDate>Mon, 17 Jul 2017 13:32:00 GMT</pubDate></item><item><title>Status update week 6 GSoC</title><link>http://bjodah.github.io/blog/posts/gsoc-week6.html</link><dc:creator>Björn Dahlgren</dc:creator><description>&lt;div&gt;&lt;div class="section" id="finishing-up-tutorial-material"&gt;
&lt;h2&gt;Finishing up tutorial material&lt;/h2&gt;
&lt;p&gt;We have been busy adding the final touches to the upcoming tutorial. (you can read
about the tutorial in ealier blog posts).&lt;/p&gt;
&lt;p&gt;I thought I would share a technique for doing exercises in Jupyter notebooks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-exercise-magic"&gt;
&lt;h2&gt;The %exercise magic&lt;/h2&gt;
&lt;p&gt;There are quite a few ways to provide exercises in jupyter notebooks
(eventually I think there will be a de facto standard, either as a
separate package or included with the notebook itself). But I
essentially wanted a special version of &lt;tt class="docutils literal"&gt;%load&lt;/tt&gt; which would load a
file into a cell but replace some parts of the expressions with gaps
for the tutorial attendee to fill in.&lt;/p&gt;
&lt;p&gt;Thanks to IPython being a popular project there was already &lt;a class="reference external" href="https://stackoverflow.com/a/38103336/790973"&gt;a
solution&lt;/a&gt;
posted on StackOverflow which did nearly exactly this.&lt;/p&gt;
&lt;p&gt;After some tweaking I came up with this&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_3c1b85fc4cd649e2a6061f6618eb86e0-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;IPython.core.magic&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;ipym&lt;/span&gt;
&lt;a name="rest_code_3c1b85fc4cd649e2a6061f6618eb86e0-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_3c1b85fc4cd649e2a6061f6618eb86e0-3"&gt;&lt;/a&gt;&lt;span class="nd"&gt;@ipym.magics_class&lt;/span&gt;
&lt;a name="rest_code_3c1b85fc4cd649e2a6061f6618eb86e0-4"&gt;&lt;/a&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ExerciseMagic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ipym&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Magics&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_3c1b85fc4cd649e2a6061f6618eb86e0-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_3c1b85fc4cd649e2a6061f6618eb86e0-6"&gt;&lt;/a&gt;    &lt;span class="nd"&gt;@ipym.line_magic&lt;/span&gt;
&lt;a name="rest_code_3c1b85fc4cd649e2a6061f6618eb86e0-7"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;exercise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_3c1b85fc4cd649e2a6061f6618eb86e0-8"&gt;&lt;/a&gt;        &lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'  # EXERCISE: '&lt;/span&gt;
&lt;a name="rest_code_3c1b85fc4cd649e2a6061f6618eb86e0-9"&gt;&lt;/a&gt;        &lt;span class="n"&gt;out_lst&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;a name="rest_code_3c1b85fc4cd649e2a6061f6618eb86e0-10"&gt;&lt;/a&gt;        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ln&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readlines&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;a name="rest_code_3c1b85fc4cd649e2a6061f6618eb86e0-11"&gt;&lt;/a&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;ln&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_3c1b85fc4cd649e2a6061f6618eb86e0-12"&gt;&lt;/a&gt;                &lt;span class="n"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ln&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_3c1b85fc4cd649e2a6061f6618eb86e0-13"&gt;&lt;/a&gt;                &lt;span class="n"&gt;out_lst&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pre&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rstrip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;'???'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_3c1b85fc4cd649e2a6061f6618eb86e0-14"&gt;&lt;/a&gt;            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_3c1b85fc4cd649e2a6061f6618eb86e0-15"&gt;&lt;/a&gt;                &lt;span class="n"&gt;out_lst&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ln&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_3c1b85fc4cd649e2a6061f6618eb86e0-16"&gt;&lt;/a&gt;        &lt;span class="n"&gt;out_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'# &lt;/span&gt;&lt;span class="si"&gt;%e&lt;/span&gt;&lt;span class="s1"&gt;xercise {0}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;{1}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;out_lst&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_3c1b85fc4cd649e2a6061f6618eb86e0-17"&gt;&lt;/a&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_next_input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;out_str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_3c1b85fc4cd649e2a6061f6618eb86e0-18"&gt;&lt;/a&gt;
&lt;a name="rest_code_3c1b85fc4cd649e2a6061f6618eb86e0-19"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;load_ipython_extension&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_3c1b85fc4cd649e2a6061f6618eb86e0-20"&gt;&lt;/a&gt;    &lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register_magics&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ExerciseMagic&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_3c1b85fc4cd649e2a6061f6618eb86e0-21"&gt;&lt;/a&gt;
&lt;a name="rest_code_3c1b85fc4cd649e2a6061f6618eb86e0-22"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;unload_ipython_extension&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_3c1b85fc4cd649e2a6061f6618eb86e0-23"&gt;&lt;/a&gt;    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;The downside of using this magic is that reloading the cell requires
the user to uncomment the &lt;tt class="docutils literal"&gt;# %exercise ...&lt;/tt&gt; line, delete the rest of
the cell and rerun it. This will only feel natural if you've already
worked with the &lt;tt class="docutils literal"&gt;%load&lt;/tt&gt; magic before (which in my humble opinion
is suboptimal since you often want bi-directional editing whenever you
pull out that magic).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>Python</category><category>SymPy</category><guid>http://bjodah.github.io/blog/posts/gsoc-week6.html</guid><pubDate>Sat, 08 Jul 2017 19:19:00 GMT</pubDate></item><item><title>Status update week 5 GSoC</title><link>http://bjodah.github.io/blog/posts/gsoc-week5.html</link><dc:creator>Björn Dahlgren</dc:creator><description>&lt;div&gt;&lt;div class="section" id="continued-work-on-tutorial-material"&gt;
&lt;h2&gt;Continued work on tutorial material&lt;/h2&gt;
&lt;p&gt;Cross-platform work is always a bit tricky. Python does in general
a great job of allowing programs to access the filesystem, network etc
in an OS agnostic manner, but sometimes there is no way around having
to write special code for each platform. In Python that often means
that we will do runtime inspection:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; sys.platform
'linux'  # or e.g. darwin
&amp;gt;&amp;gt;&amp;gt; os.name
'posix'  # or e.g. nt
&lt;/pre&gt;
&lt;p&gt;To add another dimension of complexity we sometimes deal with 32-bit
and sometimes 64-bit systems (most headaches are caused by pointer
sizes, size of &lt;tt class="docutils literal"&gt;int&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;long&lt;/tt&gt;), in python we can get the size of
&lt;tt class="docutils literal"&gt;int&lt;/tt&gt; of the platform quite easily:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; sys.maxsize - 2**63 + 1
0
&lt;/pre&gt;
&lt;p&gt;when you, in addition to this, are doing code-generation, you are most
likely relying on a compiler. That is our third dimension of
complexity, on linux that (usually) translates to gcc &amp;amp; llvm/clang
(but Intel's icc/ifort &amp;amp; portland group compilers and not uncommon).
This third "dimension" has been the number one struggle the past
week (and in particular the &lt;a class="reference external" href="https://github.com/sympy/scipy-2017-codegen-tutorial/issues/13"&gt;combination&lt;/a&gt;
mingw/&lt;a class="reference external" href="https://github.com/sympy/scipy-2017-codegen-tutorial/pull/14"&gt;windows&lt;/a&gt;). At
this point I feel that it is not worthwhile to continue pursuing &lt;tt class="docutils literal"&gt;mingw&lt;/tt&gt;
support on Windows.&lt;/p&gt;
&lt;p&gt;It is quite likely that a few of our attendees will have some
technical difficulties with system installed compilers. Therefore, I'm
particularly happy that we now have got our &lt;a class="reference external" href="https://mybinder.org"&gt;binder&lt;/a&gt; environment to work flawlessly. It took some
work to setup a &lt;a class="reference external" href="https://github.com/sympy/scipy-2017-codegen-tutorial/blob/master/Dockerfile"&gt;Dockerfile&lt;/a&gt;,
but now it feels reassuring to have this as a fall-back.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="work-on-sympy-for-version-1-1"&gt;
&lt;h2&gt;Work on SymPy for version 1.1&lt;/h2&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://github.com/sympy/sympy/pull/12808"&gt;work&lt;/a&gt; on the
&lt;tt class="docutils literal"&gt;PythonCodePrinter&lt;/tt&gt; has progressed since last week and should
hopefully soon be ready for merging. The purpose of this class is to
be stepping stone moving away from having e.g. &lt;tt class="docutils literal"&gt;lambdify&lt;/tt&gt; relying on
the StrPrinter, and instead use the &lt;tt class="docutils literal"&gt;CodePrinter&lt;/tt&gt; class in
&lt;tt class="docutils literal"&gt;.printing.codeprinter&lt;/tt&gt;. Changing the super class showed to be
trickier than first anticipiated (I thought it would be an afternoons
work at most). I originally planned to rename the original
&lt;tt class="docutils literal"&gt;PythonPrinter&lt;/tt&gt; to something more appropriate (&lt;tt class="docutils literal"&gt;SymPyCodePrinter&lt;/tt&gt;)
together with its convenience functions. However, since this would
incur a deprecation for only name change, it was decided that we will
have to live with the old naming (to avoid raising tons of deprecation
warnings in downstream projects).&lt;/p&gt;
&lt;p&gt;We had identified two extensions we wanted to introduce to the
codegeneration/autowrap factilities before the v1.1 release:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Kenneth Lyons (@ixjlyons) &lt;a class="reference external" href="https://github.com/sympy/sympy/pull/12833"&gt;spear-headed&lt;/a&gt; the effort to allow
custom CodeGen subclasses to be passed to &lt;tt class="docutils literal"&gt;codegen&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;...and Jason the &lt;a class="reference external" href="https://github.com/sympy/sympy/pull/12843"&gt;changes&lt;/a&gt; to the
&lt;tt class="docutils literal"&gt;CythonWrapper&lt;/tt&gt; to allow compiler arguments to be passed to
autowrap.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="plans-for-the-upcoming-week"&gt;
&lt;h2&gt;Plans for the upcoming week&lt;/h2&gt;
&lt;p&gt;With a release candidate of SymPy v1.1 out the door (an impressive
effort led by @asmeurer) and most cross-platform issues out of the
way, it is about time for the final iterations of the  tutorial
material (and hopefully iron out any related issues in the rc).&lt;/p&gt;
&lt;p&gt;At the end of the week it's time for me to fly to the US to attend
SciPy 2017. I have high expectations and believe that it will be a
great catalyst for the rest of the summers work on code-generation.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>Python</category><category>SymPy</category><guid>http://bjodah.github.io/blog/posts/gsoc-week5.html</guid><pubDate>Mon, 03 Jul 2017 18:37:00 GMT</pubDate></item></channel></rss>